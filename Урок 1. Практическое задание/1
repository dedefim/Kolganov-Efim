from random import sample


##############################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.
    Алгоритм 1:
    Создать множество из списка
    Сложность: линейная.
    """
    lst_to_set = set(lst_obj)  # линейная
    return lst_to_set  # линейная


##############################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.
    Алгоритм 2:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах
    Сложность: квадратичная.
    """
    for j in range(len(lst_obj)):          # линейная
        if lst_obj[j] in lst_obj[j+1:]:    # квадратная
            return False                   # линейная
    return True                            # линейная


##############################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.
    Алгоритм 3:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.
    Сложность: квадратная
    """
    lst_copy = list(lst_obj)                 # линейная
    lst_copy.sort()                          # линейная
    for i in range(len(lst_obj) - 1):        # линейная
        if lst_copy[i] == lst_copy[i+1]:     # квадратная
            return False                     # линейная
    return True                              # линейная


for j in (50, 500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
